0:00:06.080,0:00:06.700
Раннее

0:00:06.700,0:00:07.200
мы уже говорили

0:00:07.200,0:00:08.480
что для отмены commit-ов

0:00:08.480,0:00:10.200
можно использовать команду 'reset'. 

0:00:10.200,0:00:10.980
К примеру 

0:00:10.980,0:00:12.420
для отмены последнего commit-а 

0:00:12.420,0:00:14.420
можно вернуться на один шаг назад

0:00:14.420,0:00:17.220
или же, можно посредством команды 'rebase'

0:00:17.220,0:00:19.340
отредактировать историю разработки 

0:00:19.340,0:00:21.340
и убрать все следы неудачных изменений.

0:00:21.960,0:00:23.840
Однако, при разработке в команде

0:00:23.840,0:00:25.840
у этих подходов есть общая проблема.

0:00:25.900,0:00:28.320
Если commit уже отправлен коллегам

0:00:28.320,0:00:30.360
то его так просто не отредактировать 

0:00:30.360,0:00:31.340
и не удалить.

0:00:31.360,0:00:32.840
Потому что локальную-то историю

0:00:32.840,0:00:34.840
мы, конечно, можем исправить как угодно 

0:00:34.840,0:00:36.380
но если commit уже получили 

0:00:36.380,0:00:37.560
другие разработчики

0:00:37.560,0:00:39.260
и возможно, даже сделали

0:00:39.320,0:00:40.800
на его основе что-то еще

0:00:40.800,0:00:43.360
то так просто отменить его у всех не получится.

0:00:44.220,0:00:46.640
Здесь, бывает полезна другая команда

0:00:46.640,0:00:47.720
'git revert'

0:00:47.720,0:00:50.580
Она делает очень простую вещь

0:00:50.580,0:00:53.060
Смотрит какие изменения сделаны в указанном commit-е

0:00:53.060,0:00:54.520
например, в текущем

0:00:54.520,0:00:56.360
и создает новый commit

0:00:56.480,0:00:58.000
с противоположными изменениями.

0:00:58.540,0:01:00.820
Такое сообщение у него будет по умолчанию.

0:01:00.820,0:01:02.540
Давайте так его и оставим.

0:01:02.540,0:01:03.840
Готово.

0:01:03.840,0:01:05.280
Давайте посмотрим.

0:01:05.280,0:01:06.700
Вот предыдущий commit.

0:01:06.700,0:01:08.820
здесь были добавлены такие изменения

0:01:08.960,0:01:09.720
а в новом

0:01:09.720,0:01:11.460
последнем, который создал 'revert'

0:01:11.460,0:01:13.560
как видно, ровно они же, удалены.

0:01:13.880,0:01:15.880
Конечно, не очень хорошо

0:01:15.880,0:01:18.500
когда какие-то изменения сначала делаются в репозитории 

0:01:18.660,0:01:20.080
а потом они же отменяются.

0:01:20.080,0:01:22.400
Это загрязняет историю разработки.

0:01:22.400,0:01:24.180
С другой стороны 

0:01:24.180,0:01:25.160
еще раз повторюсь

0:01:25.160,0:01:27.120
Что Git позволяет легко пересылать

0:01:27.120,0:01:28.420
друг другу новые commit-ы.

0:01:28.420,0:01:30.420
А вот команды забрать commit назад

0:01:30.420,0:01:31.680
не существует

0:01:31.680,0:01:33.280
это как с емейлами

0:01:33.280,0:01:35.220
пока я письмо редактирую у себя на компьютере 

0:01:35.220,0:01:36.560
я могу менять его как хочу.

0:01:36.740,0:01:38.220
А когда я его уже отослал 

0:01:38.220,0:01:40.220
то просто так забрать нельзя.

0:01:40.220,0:01:40.720
В таких случаях

0:01:40.720,0:01:43.360
'revert' может быть единственным приемлемым выходом.

0:01:44.380,0:01:47.360
Вызвать 'revert', можно совершенно любым commit-ом

0:01:47.360,0:01:48.600
где бы он ни находился.

0:01:48.740,0:01:51.380
Так что отменить можно вообще произвольные изменения

0:01:51.380,0:01:53.380
даже те которые были давно.

0:01:53.380,0:01:56.440
Конечно, если изменение были с тех пор перезаписаны

0:01:56.440,0:01:57.560
как-то еще дополнены

0:01:57.560,0:01:59.400
то при этом может возникнуть конфликт

0:01:59.480,0:02:01.560
который понадобится разрешить.

0:02:01.560,0:02:03.560
Разрешается он обычным образом

0:02:03.620,0:02:04.920
то есть, поправили файл

0:02:04.920,0:02:05.760
'git add'

0:02:05.760,0:02:07.760
и 'git commit'.

0:02:08.440,0:02:09.320
Команда 'revert' 

0:02:09.320,0:02:11.800
также позволяет обращать и диапазон commit-ов.

0:02:12.100,0:02:14.420
При этом будут созданы обратные для них.

0:02:14.420,0:02:16.140
Это естественное поведение

0:02:16.140,0:02:18.420
если учесть, что внутри команда 'revert' 

0:02:18.420,0:02:20.560
устроена точно так же как 'cherry-pick'.

0:02:21.180,0:02:23.420
У них общие внутренние механизмы работы

0:02:23.680,0:02:25.320
Разница, по сути, только в том

0:02:25.320,0:02:27.320
что 'revert' создает не копию commit-а 

0:02:27.320,0:02:28.760
а обратный commit

0:02:28.760,0:02:30.320
То есть, например, вот так 

0:02:30.320,0:02:32.320
будет выглядеть обращение commit-ов 

0:02:32.320,0:02:33.720
вот этих  b, c, d

0:02:33.720,0:02:35.640
то есть будут последовательно созданы

0:02:35.840,0:02:37.740
commit-ы обратные каждому из них.

0:02:37.740,0:02:40.980
Соответственно, и по опциям у команды 'revert'

0:02:40.980,0:02:42.420
своих опций практически нет

0:02:42.420,0:02:45.280
зато она поддерживает почти все флаги команды 'cherry-pick'.

0:02:45.400,0:02:47.380
Их описание мы видели ранее

0:02:47.380,0:02:49.380
в соответствующем выпуске скринкаста.